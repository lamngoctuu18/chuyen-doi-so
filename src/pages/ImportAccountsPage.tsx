import React, { useState } from 'react';
import { 
  Upload, Download, FileText, AlertCircle, CheckCircle, 
  FileSpreadsheet, Users, GraduationCap, Building, UserCog 
} from 'lucide-react';
import { refreshDashboardWithDelay } from '../utils/dashboardUtils';

interface ImportResult {
  success: boolean;
  message: string;
  data?: {
    file: {
      originalName: string;
      size: number;
      totalRows: number;
    };
    parsing: {
      validRows: number;
      errorRows: number;
      errors: Array<{ row: number; error: string }>;
    };
    import: {
      accountsCreated: number;
      accountsUpdated: number;
      profilesCreated: number;
      profilesUpdated: number;
      errors: Array<{ userId: string; error: string }>;
    };
    summary: {
      totalProcessed: number;
      totalSuccess: number;
      totalErrors: number;
    };
  };
}

interface FilePreview {
  fileName: string;
  totalRows: number;
  columns: string[];
  requiredColumns: string[];
  missingColumns: string[];
  extraColumns: string[];
  sampleData: Array<{ [key: string]: any }>;
  isValid: boolean;
  errors: string[];
}

type AccountType = 'sinh-vien' | 'giang-vien' | 'doanh-nghiep' | 'admin';

interface AccountTypeConfig {
  key: AccountType;
  name: string;
  icon: React.ReactNode;
  color: string;
  bgColor: string;
  description: string;
  templateColumns: string[];
}

const ImportAccountsPage: React.FC = () => {
  const [selectedType, setSelectedType] = useState<AccountType>('sinh-vien');
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const [importResult, setImportResult] = useState<ImportResult | null>(null);
  const [isImporting, setIsImporting] = useState(false);
  const [filePreview, setFilePreview] = useState<FilePreview | null>(null);
  const [isPreviewingFile, setIsPreviewingFile] = useState(false);

  const accountTypes: AccountTypeConfig[] = [
    {
      key: 'sinh-vien',
      name: 'Sinh vi√™n',
      icon: <GraduationCap className="w-6 h-6" />,
      color: 'text-blue-600',
      bgColor: 'bg-blue-50 border-blue-200',
      description: 'Import danh s√°ch sinh vi√™n t·ª´ file Excel',
      templateColumns: [
        'M√£ sinh vi√™n*', 'H·ªç t√™n*', 'M·∫≠t kh·∫©u*', 'Email', 'S·ªë ƒëi·ªán tho·∫°i', 
        'L·ªõp', 'Khoa', 'Ng√†nh', 'Kh√≥a h·ªçc', 'Ng√†y sinh', 'Gi·ªõi t√≠nh', 
        'ƒê·ªãa ch·ªâ', 'GPA', 'T√¨nh tr·∫°ng h·ªçc t·∫≠p'
      ]
    },
    {
      key: 'giang-vien',
      name: 'Gi·∫£ng vi√™n',
      icon: <Users className="w-6 h-6" />,
      color: 'text-green-600',
      bgColor: 'bg-green-50 border-green-200',
      description: 'Import danh s√°ch gi·∫£ng vi√™n t·ª´ file Excel',
      templateColumns: [
        'M√£ gi·∫£ng vi√™n*', 'H·ªç t√™n*', 'M·∫≠t kh·∫©u*', 'Email', 'S·ªë ƒëi·ªán tho·∫°i',
        'Khoa', 'B·ªô m√¥n', 'Ch·ª©c v·ª•', 'H·ªçc v·ªã', 'Chuy√™n m√¥n', 
        'ƒê·ªãa ch·ªâ', 'Kinh nghi·ªám l√†m vi·ªác', 'B·∫±ng c·∫•p'
      ]
    },
    {
      key: 'doanh-nghiep',
      name: 'Doanh nghi·ªáp',
      icon: <Building className="w-6 h-6" />,
      color: 'text-purple-600',
      bgColor: 'bg-purple-50 border-purple-200',
      description: 'Import danh s√°ch doanh nghi·ªáp t·ª´ file Excel',
      templateColumns: [
        'M√£ doanh nghi·ªáp*', 'T√™n c√¥ng ty*', 'M·∫≠t kh·∫©u*', 'T√™n ng∆∞·ªùi li√™n h·ªá', 'Email',
        'Ch·ª©c v·ª• ng∆∞·ªùi li√™n h·ªá', 'ƒê·ªãa ch·ªâ c√¥ng ty', 'S·ªë ƒëi·ªán tho·∫°i', 'Email c√¥ng ty',
        'Website', 'Lƒ©nh v·ª±c ho·∫°t ƒë·ªông', 'Quy m√¥ nh√¢n s·ª±', 'M√¥ t·∫£ c√¥ng ty',
        'Y√™u c·∫ßu th·ª±c t·∫≠p', 'S·ªë l∆∞·ª£ng nh·∫≠n th·ª±c t·∫≠p', 'Tr·∫°ng th√°i h·ª£p t√°c'
      ]
    },
    {
      key: 'admin',
      name: 'Qu·∫£n tr·ªã vi√™n',
      icon: <UserCog className="w-6 h-6" />,
      color: 'text-red-600',
      bgColor: 'bg-red-50 border-red-200',
      description: 'Import danh s√°ch qu·∫£n tr·ªã vi√™n t·ª´ file Excel',
      templateColumns: [
        'M√£ admin*', 'H·ªç t√™n*', 'M·∫≠t kh·∫©u*', 'Email', 'S·ªë ƒëi·ªán tho·∫°i', 
        'Ch·ª©c v·ª•', 'Ph√≤ng ban', 'Quy·ªÅn h·∫°n'
      ]
    }
  ];

  const selectedConfig = accountTypes.find(type => type.key === selectedType)!;

  // L·∫•y c√°c c·ªôt b·∫Øt bu·ªôc cho t·ª´ng lo·∫°i t√†i kho·∫£n
  const getRequiredColumns = (type: AccountType): string[] => {
    switch (type) {
      case 'sinh-vien':
        return ['M√£ sinh vi√™n', 'H·ªç t√™n', 'M·∫≠t kh·∫©u'];
      case 'giang-vien':
        return ['M√£ gi·∫£ng vi√™n', 'H·ªç t√™n', 'M·∫≠t kh·∫©u'];
      case 'doanh-nghiep':
        return ['M√£ doanh nghi·ªáp', 'T√™n c√¥ng ty', 'M·∫≠t kh·∫©u'];
      case 'admin':
        return ['M√£ admin', 'H·ªç t√™n', 'M·∫≠t kh·∫©u'];
      default:
        return ['M·∫≠t kh·∫©u'];
    }
  };

  // Ki·ªÉm tra xem c·ªôt file c√≥ kh·ªõp v·ªõi c·ªôt b·∫Øt bu·ªôc kh√¥ng
  const isColumnMatch = (fileColumn: string, requiredColumn: string): boolean => {
    const fileCol = fileColumn.toLowerCase().trim();
    const reqCol = requiredColumn.toLowerCase().trim();
    
    // B·∫£n ƒë·ªì mapping c√°c c·ªôt
    const columnMappings: { [key: string]: string[] } = {
      'm√£ sinh vi√™n': ['masinhvien', 'ma_sinh_vien', 'student_id', 'studentid'],
      'h·ªç t√™n': ['hoten', 'ho_ten', 'fullname', 'full_name', 'name', 'ten'],
      'm·∫≠t kh·∫©u': ['matkhau', 'mat_khau', 'password', 'pwd', 'pass'],
      'm√£ gi·∫£ng vi√™n': ['magiangvien', 'ma_giang_vien', 'teacher_id', 'teacherid'],
      'm√£ doanh nghi·ªáp': ['madoanhnghiep', 'ma_doanh_nghiep', 'company_id', 'companyid'],
      't√™n c√¥ng ty': ['tencongty', 'ten_cong_ty', 'company_name', 'companyname'],
      'm√£ admin': ['maadmin', 'ma_admin', 'admin_id', 'adminid']
    };
    
    // Ki·ªÉm tra kh·ªõp tr·ª±c ti·∫øp
    if (fileCol === reqCol) return true;
    
    // Ki·ªÉm tra qua b·∫£n ƒë·ªì mapping
    const mappings = columnMappings[reqCol] || [];
    return mappings.some(mapping => fileCol === mapping || fileCol.includes(mapping));
  };

  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      // Ki·ªÉm tra ƒë·ªãnh d·∫°ng file
      if (!file.name.toLowerCase().endsWith('.xlsx') && !file.name.toLowerCase().endsWith('.xls')) {
        alert('Vui l√≤ng ch·ªçn file Excel (.xlsx ho·∫∑c .xls)');
        return;
      }
      
      // Ki·ªÉm tra k√≠ch th∆∞·ªõc file (max 10MB)
      if (file.size > 10 * 1024 * 1024) {
        alert('File qu√° l·ªõn. Vui l√≤ng ch·ªçn file nh·ªè h∆°n 10MB');
        return;
      }
      
      setSelectedFile(file);
      setImportResult(null);
      setFilePreview(null);
      
      // T·ª± ƒë·ªông preview file sau khi ch·ªçn
      previewFile(file);
    }
  };

  // H√†m preview n·ªôi dung file Excel
  const previewFile = async (file: File) => {
    if (!file) return;

    setIsPreviewingFile(true);
    const formData = new FormData();
    formData.append('excelFile', file);

    try {
      console.log('üîç Previewing file:', file.name, 'Type:', selectedType);
      
      const response = await fetch(`http://localhost:3001/api/import/preview/${selectedType}`, {
        method: 'POST',
        body: formData,
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('token')}`
        }
      });

      console.log('üì° Response status:', response.status);

      const result = await response.json();
      
      if (result.success) {
        const requiredColumns = getRequiredColumns(selectedType);
        const missingColumns = requiredColumns.filter(reqCol => {
          return !result.data.columns.some((fileCol: string) => 
            isColumnMatch(fileCol, reqCol)
          );
        });

        setFilePreview({
          fileName: file.name,
          totalRows: result.data.totalRows,
          columns: result.data.columns,
          requiredColumns,
          missingColumns,
          extraColumns: result.data.columns.filter((col: string) => 
            !selectedConfig.templateColumns.some(templateCol => 
              templateCol.toLowerCase().replace('*', '').includes(col.toLowerCase())
            )
          ),
          sampleData: result.data.sampleData || [],
          isValid: missingColumns.length === 0,
          errors: missingColumns.length > 0 ? [`Thi·∫øu c√°c c·ªôt b·∫Øt bu·ªôc: ${missingColumns.join(', ')}`] : []
        });
      } else {
        setFilePreview({
          fileName: file.name,
          totalRows: 0,
          columns: [],
          requiredColumns: getRequiredColumns(selectedType),
          missingColumns: getRequiredColumns(selectedType),
          extraColumns: [],
          sampleData: [],
          isValid: false,
          errors: [result.message || 'Kh√¥ng th·ªÉ ƒë·ªçc file Excel']
        });
      }
    } catch (error) {
      console.error('Preview file error:', error);
      
      // T·∫°m th·ªùi m√¥ ph·ªèng preview khi server kh√¥ng ho·∫°t ƒë·ªông  
      const mockColumns = ['maSinhVien', 'hoTen', 'email', 'password', 'lop', 'khoa', 'nganh', 'khoaHoc', 'ngaySinh', 'gioiTinh', 'diaChi', 'soDienThoai', 'emailCaNhan', 'gpa', 'tinhTrangHocTap'];
      const requiredColumns = getRequiredColumns(selectedType);
      const missingColumns = requiredColumns.filter(reqCol => {
        return !mockColumns.some(mockCol => isColumnMatch(mockCol, reqCol));
      });
      
      setFilePreview({
        fileName: file.name,
        totalRows: 0,
        columns: mockColumns,
        requiredColumns,
        missingColumns,
        extraColumns: [],
        sampleData: [],
        isValid: missingColumns.length === 0,
        errors: missingColumns.length > 0 ? 
          [`File thi·∫øu c√°c c·ªôt b·∫Øt bu·ªôc: ${missingColumns.join(', ')}`] : 
          ['Kh√¥ng th·ªÉ k·∫øt n·ªëi server ƒë·ªÉ ki·ªÉm tra chi ti·∫øt. Ch·ªâ ki·ªÉm tra c∆° b·∫£n.']
      });
    } finally {
      setIsPreviewingFile(false);
    }
  };

  const handleImport = async () => {
    if (!selectedFile) {
      alert('Vui l√≤ng ch·ªçn file Excel');
      return;
    }

    setIsImporting(true);
    
    try {
      const formData = new FormData();
      formData.append('excelFile', selectedFile);

      const response = await fetch(`http://localhost:3001/api/import/${selectedType}`, {
        method: 'POST',
        body: formData,
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('token')}`
        }
      });

      const result: ImportResult = await response.json();
      setImportResult(result);

      if (result.success) {
        // Refresh dashboard after successful import
        refreshDashboardWithDelay();
        
        // Reset form sau khi import th√†nh c√¥ng
        setTimeout(() => {
          setSelectedFile(null);
          const fileInput = document.getElementById('excel-file') as HTMLInputElement;
          if (fileInput) fileInput.value = '';
        }, 3000);
      }

    } catch (error) {
      console.error('Import error:', error);
      setImportResult({
        success: false,
        message: 'L·ªói k·∫øt n·ªëi ƒë·∫øn server. Vui l√≤ng th·ª≠ l·∫°i.'
      });
    } finally {
      setIsImporting(false);
    }
  };

  const downloadTemplate = async () => {
    try {
      const response = await fetch(`http://localhost:3001/api/import/templates/${selectedType}`, {
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('token')}`
        }
      });
      
      if (response.ok) {
        const blob = await response.blob();
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.style.display = 'none';
        a.href = url;
        a.download = `template-${selectedType}.xlsx`;
        document.body.appendChild(a);
        a.click();
        window.URL.revokeObjectURL(url);
        document.body.removeChild(a);
      } else {
        alert('L·ªói t·∫£i template. Vui l√≤ng th·ª≠ l·∫°i.');
      }
    } catch (error) {
      console.error('Download template error:', error);
      alert('L·ªói t·∫£i template. Vui l√≤ng th·ª≠ l·∫°i.');
    }
  };

  const resetForm = () => {
    setSelectedFile(null);
    setImportResult(null);
    setFilePreview(null);
    setIsPreviewingFile(false);
    const fileInput = document.getElementById('excel-file') as HTMLInputElement;
    if (fileInput) fileInput.value = '';
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 via-indigo-50 to-blue-100">
      {/* Modern Header */}
      <div className="relative overflow-hidden" style={{background: 'linear-gradient(135deg, #213f99 0%, #213f99 50%, #f37320 100%)'}}>
        <div className="absolute inset-0">
          <div className="absolute top-0 left-0 w-96 h-96 bg-gradient-to-br from-indigo-400/20 to-blue-400/20 rounded-full blur-3xl animate-pulse"></div>
          <div className="absolute bottom-0 right-0 w-96 h-96 bg-gradient-to-br from-blue-400/20 to-purple-400/20 rounded-full blur-3xl animate-pulse delay-2000"></div>
        </div>
        
        <div className="relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
          <div className="flex items-center space-x-4">
            <div className="p-3 bg-white/10 backdrop-blur-sm rounded-2xl">
              <FileSpreadsheet className="w-8 h-8 text-white" />
            </div>
            <div>
              <h1 className="text-4xl md:text-5xl font-bold text-white mb-2 tracking-tight">
                Import T√†i kho·∫£n
              </h1>
              <p className="text-xl text-indigo-100">
                Import danh s√°ch t√†i kho·∫£n sinh vi√™n, gi·∫£ng vi√™n, doanh nghi·ªáp t·ª´ file Excel
              </p>
            </div>
          </div>
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Sidebar - Ch·ªçn lo·∫°i t√†i kho·∫£n */}
          <div className="lg:col-span-1">
            <div className="bg-white rounded-xl shadow-sm p-6">
              <h2 className="text-lg font-semibold text-gray-900 mb-4">Ch·ªçn lo·∫°i t√†i kho·∫£n</h2>
              
              <div className="space-y-3">
                {accountTypes.map((type) => (
                  <button
                    key={type.key}
                    onClick={() => {
                      setSelectedType(type.key);
                      resetForm();
                    }}
                    className={`w-full p-4 rounded-lg border-2 transition-all duration-200 text-left ${
                      selectedType === type.key
                        ? `${type.bgColor} border-current ${type.color}`
                        : 'bg-gray-50 border-gray-200 hover:bg-gray-100'
                    }`}
                  >
                    <div className="flex items-center space-x-3">
                      <div className={`p-2 rounded-lg ${selectedType === type.key ? 'bg-white' : 'bg-white'}`}>
                        <div className={selectedType === type.key ? type.color : 'text-gray-600'}>
                          {type.icon}
                        </div>
                      </div>
                      <div>
                        <div className={`font-medium ${selectedType === type.key ? type.color : 'text-gray-900'}`}>
                          {type.name}
                        </div>
                        <div className="text-sm text-gray-600 mt-1">
                          {type.description}
                        </div>
                      </div>
                    </div>
                  </button>
                ))}
              </div>

              {/* Template info */}
              <div className="mt-6 p-4 bg-gray-50 rounded-lg">
                <h3 className="font-medium text-gray-900 mb-2">Template {selectedConfig.name}</h3>
                
                {/* Th√¥ng b√°o c·ªôt b·∫Øt bu·ªôc */}
                <div className="mb-3 p-2 bg-red-50 border border-red-200 rounded">
                  <p className="text-sm text-red-800 font-medium">
                    ‚ö†Ô∏è C√°c c·ªôt b·∫Øt bu·ªôc (c√≥ d·∫•u *):
                  </p>
                  <div className="flex flex-wrap gap-1 mt-1">
                    {getRequiredColumns(selectedType).map((col, index) => (
                      <span key={index} className="px-2 py-1 bg-red-100 text-red-800 text-xs rounded">
                        {col}
                      </span>
                    ))}
                  </div>
                </div>

                <p className="text-sm text-gray-600 mb-3">
                  File Excel c√≥ th·ªÉ c√≥ {selectedConfig.templateColumns.length} c·ªôt:
                </p>
                <div className="text-xs text-gray-500 space-y-1">
                  {selectedConfig.templateColumns.slice(0, 8).map((col, index) => (
                    <div key={index} className={col.includes('*') ? 'font-medium text-red-600' : ''}>
                      ‚Ä¢ {col}
                    </div>
                  ))}
                  {selectedConfig.templateColumns.length > 8 && (
                    <div>... v√† {selectedConfig.templateColumns.length - 8} c·ªôt kh√°c</div>
                  )}
                </div>
              </div>
            </div>
          </div>

          {/* Main Content */}
          <div className="lg:col-span-2">
            <div className="bg-white rounded-xl shadow-sm p-6">
              <div className="flex items-center justify-between mb-6">
                <div className="flex items-center space-x-3">
                  <div className={`${selectedConfig.color}`}>
                    {selectedConfig.icon}
                  </div>
                  <h2 className="text-lg font-semibold text-gray-900">
                    Import {selectedConfig.name}
                  </h2>
                </div>
                
                <button
                  onClick={downloadTemplate}
                  className="inline-flex items-center px-4 py-2 bg-gray-100 hover:bg-gray-200 text-gray-700 rounded-lg transition-colors duration-200"
                >
                  <Download className="w-4 h-4 mr-2" />
                  T·∫£i Template
                </button>
              </div>

              {/* Upload Section */}
              <div className="mb-6">
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Ch·ªçn file Excel
                </label>
                <div className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center hover:border-gray-400 transition-colors duration-200">
                  <Upload className="w-12 h-12 text-gray-400 mx-auto mb-4" />
                  <div className="space-y-2">
                    <p className="text-sm text-gray-600">
                      K√©o th·∫£ file Excel v√†o ƒë√¢y ho·∫∑c click ƒë·ªÉ ch·ªçn file
                    </p>
                    <p className="text-xs text-gray-500">
                      H·ªó tr·ª£ ƒë·ªãnh d·∫°ng .xlsx, .xls (t·ªëi ƒëa 10MB)
                    </p>
                  </div>
                  <input
                    id="excel-file"
                    type="file"
                    accept=".xlsx,.xls"
                    onChange={handleFileSelect}
                    className="hidden"
                  />
                  <button
                    onClick={() => document.getElementById('excel-file')?.click()}
                    className="mt-4 inline-flex items-center px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors duration-200"
                  >
                    <FileText className="w-4 h-4 mr-2" />
                    Ch·ªçn File
                  </button>
                </div>

                {selectedFile && (
                  <div className="mt-4 p-4 bg-blue-50 rounded-lg border border-blue-200">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center space-x-3">
                        <FileSpreadsheet className="w-5 h-5 text-blue-600" />
                        <div>
                          <p className="font-medium text-blue-900">{selectedFile.name}</p>
                          <p className="text-sm text-blue-600">
                            {(selectedFile.size / 1024 / 1024).toFixed(2)} MB
                          </p>
                        </div>
                      </div>
                      <button
                        onClick={resetForm}
                        className="text-blue-600 hover:text-blue-800"
                      >
                        X√≥a
                      </button>
                    </div>
                  </div>
                )}

                {/* File Preview */}
                {isPreviewingFile && (
                  <div className="mt-4 p-4 bg-yellow-50 rounded-lg border border-yellow-200">
                    <div className="flex items-center space-x-2">
                      <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-yellow-600"></div>
                      <span className="text-sm text-yellow-800">ƒêang ki·ªÉm tra n·ªôi dung file...</span>
                    </div>
                  </div>
                )}

                {filePreview && (
                  <div className="mt-4 p-4 bg-white rounded-lg border">
                    <h4 className="font-medium text-gray-900 mb-3">Th√¥ng tin file Excel</h4>
                    
                    <div className="space-y-3">
                      <div className="flex justify-between text-sm">
                        <span className="text-gray-600">T·ªïng s·ªë d√≤ng:</span>
                        <span className="font-medium">{filePreview.totalRows}</span>
                      </div>
                      
                      <div className="flex justify-between text-sm">
                        <span className="text-gray-600">S·ªë c·ªôt:</span>
                        <span className="font-medium">{filePreview.columns.length}</span>
                      </div>

                      {/* Tr·∫°ng th√°i validation */}
                      <div className={`p-3 rounded-lg ${
                        filePreview.isValid 
                          ? 'bg-green-50 border border-green-200' 
                          : 'bg-red-50 border border-red-200'
                      }`}>
                        <div className="flex items-center space-x-2">
                          {filePreview.isValid ? (
                            <CheckCircle className="w-5 h-5 text-green-600" />
                          ) : (
                            <AlertCircle className="w-5 h-5 text-red-600" />
                          )}
                          <span className={`font-medium ${
                            filePreview.isValid ? 'text-green-800' : 'text-red-800'
                          }`}>
                            {filePreview.isValid ? 'File h·ª£p l·ªá' : 'File kh√¥ng h·ª£p l·ªá'}
                          </span>
                        </div>
                        
                        {filePreview.errors.length > 0 && (
                          <div className="mt-2">
                            {filePreview.errors.map((error, index) => (
                              <p key={index} className="text-sm text-red-700">‚Ä¢ {error}</p>
                            ))}
                          </div>
                        )}
                      </div>

                      {/* C·ªôt b·∫Øt bu·ªôc */}
                      <div>
                        <h5 className="text-sm font-medium text-gray-900 mb-2">C·ªôt b·∫Øt bu·ªôc:</h5>
                        <div className="flex flex-wrap gap-1">
                          {filePreview.requiredColumns.map((col, index) => (
                            <span
                              key={index}
                              className={`px-2 py-1 rounded text-xs ${
                                filePreview.missingColumns.includes(col)
                                  ? 'bg-red-100 text-red-800'
                                  : 'bg-green-100 text-green-800'
                              }`}
                            >
                              {col}
                            </span>
                          ))}
                        </div>
                      </div>

                      {/* C·ªôt trong file */}
                      <div>
                        <h5 className="text-sm font-medium text-gray-900 mb-2">C·ªôt trong file:</h5>
                        <div className="flex flex-wrap gap-1">
                          {filePreview.columns.map((col, index) => (
                            <span
                              key={index}
                              className="px-2 py-1 rounded text-xs bg-blue-100 text-blue-800"
                            >
                              {col}
                            </span>
                          ))}
                        </div>
                      </div>
                    </div>
                  </div>
                )}
              </div>

              {/* Import Button */}
              <div className="flex justify-center mb-6">
                <button
                  onClick={handleImport}
                  disabled={!selectedFile || isImporting || (filePreview ? !filePreview.isValid : false)}
                  className={`px-8 py-3 rounded-lg font-medium transition-all duration-200 ${
                    selectedFile && !isImporting && (filePreview ? filePreview.isValid : true)
                      ? 'bg-blue-600 hover:bg-blue-700 text-white shadow-lg hover:shadow-xl'
                      : 'bg-gray-300 text-gray-500 cursor-not-allowed'
                  }`}
                >
                  {isImporting ? (
                    <>
                      <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2 inline-block"></div>
                      ƒêang import...
                    </>
                  ) : filePreview && !filePreview.isValid ? (
                    <>
                      <AlertCircle className="w-4 h-4 mr-2 inline-block" />
                      File kh√¥ng h·ª£p l·ªá
                    </>
                  ) : (
                    <>
                      <Upload className="w-4 h-4 mr-2 inline-block" />
                      Import {selectedConfig.name}
                    </>
                  )}
                </button>
              </div>

              {/* Results */}
              {importResult && (
                <div className="space-y-4">
                  {/* Status */}
                  <div className={`p-4 rounded-lg border ${
                    importResult.success 
                      ? 'bg-green-50 border-green-200' 
                      : 'bg-red-50 border-red-200'
                  }`}>
                    <div className="flex items-center space-x-3">
                      {importResult.success ? (
                        <CheckCircle className="w-5 h-5 text-green-600" />
                      ) : (
                        <AlertCircle className="w-5 h-5 text-red-600" />
                      )}
                      <div>
                        <p className={`font-medium ${
                          importResult.success ? 'text-green-900' : 'text-red-900'
                        }`}>
                          {importResult.message}
                        </p>
                      </div>
                    </div>
                  </div>

                  {/* Details */}
                  {importResult.success && importResult.data && (
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                      {/* File Info */}
                      <div className="bg-blue-50 p-4 rounded-lg">
                        <h4 className="font-medium text-blue-900 mb-2">Th√¥ng tin file</h4>
                        <div className="text-sm text-blue-700 space-y-1">
                          <p>T√™n file: {importResult.data.file.originalName}</p>
                          <p>T·ªïng d√≤ng: {importResult.data.file.totalRows}</p>
                          <p>K√≠ch th∆∞·ªõc: {(importResult.data.file.size / 1024 / 1024).toFixed(2)} MB</p>
                        </div>
                      </div>

                      {/* Processing Results */}
                      <div className="bg-green-50 p-4 rounded-lg">
                        <h4 className="font-medium text-green-900 mb-2">K·∫øt qu·∫£ x·ª≠ l√Ω</h4>
                        <div className="text-sm text-green-700 space-y-1">
                          <p>T√†i kho·∫£n t·∫°o m·ªõi: {importResult.data.import.accountsCreated}</p>
                          <p>T√†i kho·∫£n c·∫≠p nh·∫≠t: {importResult.data.import.accountsUpdated}</p>
                          <p>Profile t·∫°o m·ªõi: {importResult.data.import.profilesCreated}</p>
                          <p>Profile c·∫≠p nh·∫≠t: {importResult.data.import.profilesUpdated}</p>
                        </div>
                      </div>

                      {/* Summary */}
                      <div className="bg-purple-50 p-4 rounded-lg">
                        <h4 className="font-medium text-purple-900 mb-2">T·ªïng k·∫øt</h4>
                        <div className="text-sm text-purple-700 space-y-1">
                          <p>T·ªïng x·ª≠ l√Ω: {importResult.data.summary.totalProcessed}</p>
                          <p>Th√†nh c√¥ng: {importResult.data.summary.totalSuccess}</p>
                          <p>L·ªói: {importResult.data.summary.totalErrors}</p>
                        </div>
                      </div>
                    </div>
                  )}

                  {/* Errors */}
                  {importResult.data?.parsing.errors && importResult.data.parsing.errors.length > 0 && (
                    <div className="bg-yellow-50 p-4 rounded-lg border border-yellow-200">
                      <h4 className="font-medium text-yellow-900 mb-2">L·ªói ph√¢n t√≠ch file:</h4>
                      <div className="text-sm text-yellow-700 space-y-1 max-h-32 overflow-y-auto">
                        {importResult.data?.parsing.errors.slice(0, 10).map((error, index) => (
                          <p key={index}>D√≤ng {error.row}: {error.error}</p>
                        ))}
                        {importResult.data?.parsing.errors && importResult.data.parsing.errors.length > 10 && (
                          <p>... v√† {importResult.data.parsing.errors.length - 10} l·ªói kh√°c</p>
                        )}
                      </div>
                    </div>
                  )}

                  {importResult.data?.import.errors && importResult.data.import.errors.length > 0 && (
                    <div className="bg-red-50 p-4 rounded-lg border border-red-200">
                      <h4 className="font-medium text-red-900 mb-2">L·ªói import:</h4>
                      <div className="text-sm text-red-700 space-y-1 max-h-32 overflow-y-auto">
                        {importResult.data?.import.errors.slice(0, 10).map((error, index) => (
                          <p key={index}>{error.userId}: {error.error}</p>
                        ))}
                        {importResult.data?.import.errors && importResult.data.import.errors.length > 10 && (
                          <p>... v√† {importResult.data.import.errors.length - 10} l·ªói kh√°c</p>
                        )}
                      </div>
                    </div>
                  )}
                </div>
              )}
            </div>
          </div>
        </div>

        {/* Instructions */}
        <div className="mt-8 bg-white rounded-xl shadow-sm p-6">
          <h3 className="text-lg font-semibold text-gray-900 mb-4">H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng</h3>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <h4 className="font-medium text-gray-900 mb-2">Chu·∫©n b·ªã file Excel:</h4>
              <ul className="text-sm text-gray-600 space-y-1">
                <li>‚Ä¢ T·∫£i template t∆∞∆°ng ·ª©ng v·ªõi lo·∫°i t√†i kho·∫£n</li>
                <li>‚Ä¢ ƒêi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin theo ƒë√∫ng ƒë·ªãnh d·∫°ng</li>
                <li>‚Ä¢ Kh√¥ng ƒë·ªÉ tr·ªëng c√°c c·ªôt b·∫Øt bu·ªôc</li>
                <li>‚Ä¢ L∆∞u file d∆∞·ªõi ƒë·ªãnh d·∫°ng .xlsx ho·∫∑c .xls</li>
              </ul>
            </div>
            <div>
              <h4 className="font-medium text-gray-900 mb-2">L∆∞u √Ω quan tr·ªçng:</h4>
              <ul className="text-sm text-gray-600 space-y-1">
                <li>‚Ä¢ M√£ t√†i kho·∫£n kh√¥ng ƒë∆∞·ª£c tr√πng l·∫∑p</li>
                <li>‚Ä¢ Email ph·∫£i c√≥ ƒë·ªãnh d·∫°ng h·ª£p l·ªá</li>
                <li>‚Ä¢ N·∫øu kh√¥ng c√≥ m·∫≠t kh·∫©u, h·ªá th·ªëng d√πng m√£ t√†i kho·∫£n</li>
                <li>‚Ä¢ D·ªØ li·ªáu s·∫Ω ƒë∆∞·ª£c l∆∞u v√†o database ƒë·ªÉ ƒëƒÉng nh·∫≠p</li>
              </ul>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ImportAccountsPage;